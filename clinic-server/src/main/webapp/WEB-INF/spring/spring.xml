<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.2.xsd">


	<!-- Location of property file to externalise the Urls etc. -->
	<context:property-placeholder location="config.properties" />

	<!-- Database Transanction -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- model files -->
		<property name="packagesToScan" value="com.neeraj.clinic.model.gen">
		</property>
		<!-- hibernate properties -->
		<property name="hibernateProperties">
			<props>
				<!-- conversion of create,save,update,read into MySql queries -->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<!-- every time a database connection is made, what has to be done with 
					the existing schema, create means it will be recreated every time -->
				<prop key="hibernate.hbm2ddl.auto">select</prop>
				<!-- sql to be printed in logs -->
				<prop key="hibernate.show_sql">true</prop>
			</props>
		</property>
	</bean>

	<!-- Database Connection settings -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="${db.url}" />
		<property name="username" value="root" />
		<property name="password" value="root" />
	</bean>

	<!-- Custom Application context class -->
	<bean class="com.neeraj.core.spring.ApplicationContextProvider"></bean>


	<!-- Import beans declaration -->
	<import resource="controller-beans.xml" />
	<import resource="service-beans.xml" />
	<import resource="dao-beans.xml" />


	<!-- Mapping configuaration -->
	 <mvc:annotation-driven />
	<!--<bean id="contentNegotiationManager"
		class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		Turn off working out content type based on URL file extension, should 
			fall back to looking at the Accept headers
		<property name="favorPathExtension" value="false" />
	</bean> -->
</beans>    